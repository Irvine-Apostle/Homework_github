{
	"info": {
		"_postman_id": "e9b7d4c4-bc16-42e4-9db2-4dd069b62cf1",
		"name": "HW_02 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1 first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Боди содержит корректную строку\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}} /first",
					"host": [
						"{{url}} "
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2 user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonka_resp = pm.response.json();  // Спарсили респонс бади в джейсонку\r",
							"\r",
							"pm.test(\"Status Code 200\", function () { \r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что name в ответе равно name s request', function(){  \r",
							"    pm.expect (jsonka_resp.name).to.eql('Danil')\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что age в ответе равно age s request', function(){\r",
							"    pm.expect (jsonka_resp.age).to.eql('23')\r",
							"})\r",
							"\r",
							"pm.test ('Проверить, что salary в ответе равно salary s request', function(){\r",
							"    pm.expect(jsonka_resp.salary).to.eql(666666)\r",
							"})\r",
							"\r",
							"    var jsonka_req = request.data;  \r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function(){\r",
							"    pm.expect(jsonka_resp.name).to.eql(jsonka_req.name)\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что age в ответе равно age s request (age забрать из request.)', function () {\r",
							"    pm.expect(jsonka_resp.age).to.eql(jsonka_req.age)\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что salary в ответе равно salary s request (salary забрать из request.)', function(){\r",
							"    var ParseIntJsonReqSalary = parseInt(jsonka_req.salary) \r",
							"    pm.expect(jsonka_resp.salary).to.eql(ParseIntJsonReqSalary)\r",
							"})\r",
							"    \r",
							"console.log('Family from response = ' , jsonka_resp.family) // Вывести в консоль параметр family из response.\r",
							"\r",
							"\r",
							"pm.test('Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)', function(){ \r",
							"    pm.expect(jsonka_resp.family.u_salary_1_5_year).to.eql(jsonka_req.salary*4)\r",
							"})\r",
							"\r",
							"console.log('salary = ' + jsonka_req.salary)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Danil",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "666666",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3 object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Статус код 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var json_response = pm.response.json();\r",
							"\r",
							"var json_request = pm.request.url.query.toObject()\r",
							"\r",
							"pm.test('Проверить, что name в ответе равно name s request (name забрать из request.)',function(){\r",
							"    pm.expect(json_response.name).to.eql(json_request.name)\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что age в ответе равно age s request (age забрать из request.)',function(){\r",
							"    pm.expect(json_response.age).to.eql(json_request.age)    \r",
							"})\r",
							"\r",
							"pm.test('Проверить, что salary в ответе равно salary s request (salary забрать из request.)',function(){\r",
							"    JsonRequestSalaryInt = parseInt(json_request.salary)\r",
							"    pm.expect(json_response.salary).to.eql(JsonRequestSalaryInt)\r",
							"})\r",
							"\r",
							"console.log('Family = ' , json_response.family)\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name.\", function(){\r",
							"    pm.expect(json_response.family.pets.dog).to.have.property('age')\r",
							"})\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age.\", function(){\r",
							"    pm.expect(json_response.family.pets.dog).to.have.property('age')\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что параметр name имеет значение Luky.', function(){\r",
							"    pm.expect(json_response.family.pets.dog.name).to.eql('Luky')\r",
							"})\r",
							"\r",
							"pm.test('Проверить, что параметр age имеет значение 4.', function(){\r",
							"    pm.expect(json_response.family.pets.dog.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Danil&age=23&salary=666666",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Danil"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "666666"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4 object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status Code 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"var Response = pm.response.json();\r",
							"var Request = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test('responsename == requestname', function(){\r",
							"    pm.expect(Response.name).to.eql(Request.name)\r",
							"})\r",
							"\r",
							"pm.test('responseAge == requestAge',function(){ \r",
							"    ParseIntAge = parseInt(Request.age)\r",
							"    pm.expect(Response.age).to.eql(ParseIntAge)\r",
							"})\r",
							"\r",
							"console.log('salary' , Response.salary)\r",
							"\r",
							"console.log('salary' , Request.salary)\r",
							"\r",
							"console.log('salaryresponse 0' , Response.salary[0])\r",
							"\r",
							"console.log('salaryresponse 1', Response.salary[1])\r",
							"\r",
							"console.log('salaryresponse 2', Response.salary[2])\r",
							"\r",
							"pm.test('salaryresponse == salaryrequest', function(){\r",
							"    SalaryInt = parseInt(Request.salary)\r",
							"    pm.expect(Response.salary[0]).to.eql(SalaryInt)\r",
							"})\r",
							"\r",
							"pm.test('salaryresponse2 == salaryrequest*2',function(){\r",
							"        pm.expect(Response.salary[1]).to.eql(Request.salary*2 + \"\")\r",
							"})\r",
							"\r",
							"pm.test('SR3 == SR*3',function(){\r",
							"    pm.expect(Response.salary[2]).to.eql(Request.salary*3 + \"\")\r",
							"})\r",
							"\r",
							"pm.environment.get(\"name\");\r",
							"pm.environment.get(\"age\");\r",
							"pm.environment.get(\"salary\");\r",
							"\r",
							"pm.environment.set(\"name\", Response.name);\r",
							"pm.environment.set(\"age\", Response.age);\r",
							"pm.environment.set(\"salary\", Response.salary[0]);\r",
							"\r",
							"var SalaryArray = Response.salary\r",
							"var SalaryArrayLenght = SalaryArray.length\r",
							"\r",
							"for (var i = 0; i < SalaryArrayLenght; i++){\r",
							"    console.log('Salarycycle ' , SalaryArray[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Danil&age=23&salary=333",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Danil"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "333"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5 user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status Code 200', function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"var responseBody = pm.response.json();\r",
							"var requestBody = request.data;\r",
							"\r",
							"pm.test('json response имеет параметр start_qa_salary', function(){\r",
							"    pm.expect(responseBody).to.have.property('start_qa_salary')    \r",
							"})\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_6_months', function(){\r",
							"    pm.expect(responseBody).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_12_months', function(){\r",
							"    pm.expect(responseBody).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_1.5_year', function(){\r",
							"    pm.expect(responseBody).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"\r",
							"pm.test('json response имеет параметр qa_salary_after_3.5_years',function(){\r",
							"    pm.expect(responseBody).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"pm.test('json response имеет параметр person', function(){\r",
							"    pm.expect(responseBody).to.have.property('person')\r",
							"})\r",
							"\r",
							"pm.test('start_qa_salary равен salary из request (salary забрать из request.)', function(){\r",
							"      pm.expect(responseBody.start_qa_salary).to.eql(requestBody.salary*1)\r",
							"})\r",
							"\r",
							"pm.test(' qa_salary_after_6_months равен salary*2 из request', function(){\r",
							"    pm.expect(responseBody.qa_salary_after_6_months).to.eql(requestBody.salary*2)\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7\",function(){\r",
							"    pm.expect(responseBody.qa_salary_after_12_months).to.eql(requestBody.salary*2.7)\r",
							"})\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3\",function(){\r",
							"    pm.expect(responseBody['qa_salary_after_1.5_year']).to.eql(requestBody.salary*3.3)\r",
							"})\r",
							"\r",
							"pm.test('qa_salary_after_3.5_years равен salary*3.8',function(){\r",
							"    pm.expect(responseBody['qa_salary_after_3.5_years']).to.eql(requestBody.salary*3.8)\r",
							"})\r",
							"\r",
							"pm.test('1-й элемент из u_name равен salary из request', function(){\r",
							"    pm.expect(responseBody.person.u_name[1]).to.eql(requestBody.salary*1)\r",
							"})\r",
							"\r",
							"pm.test('u_age равен age из request ',function(){\r",
							"    pm.expect(responseBody.person.u_age).to.eql(requestBody.age*1)\r",
							"})\r",
							"\r",
							"pm.test('u_salary_5_years равен salary*4.2 из request',function(){\r",
							"    pm.expect(responseBody.person.u_salary_5_years).to.eql(requestBody.salary*4.2)\r",
							"})\r",
							"\r",
							"const personObject = responseBody.person\r",
							"for(const property in personObject){\r",
							"    console.log(`${property}: ${personObject[property]}`);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"//     var personArray = responseBody.person\r",
							"//     var arrayLength = personArray.length\r",
							"\r",
							"// for (var i = 0; i < arrayLength; i++);\r",
							"//     console.log('PersonFromArray = ' , personArray[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"pm.test(\"test\", function(){\r",
							"    pm.expect(responseBody.family.pets.dog).to.have.property('age')\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=danil&age=23&salary=33",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "danil"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "33"
						}
					]
				}
			},
			"response": []
		}
	]
}